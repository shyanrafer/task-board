// Retrieve tasks and nextId from localStorage
let taskList = JSON.parse(localStorage.getItem("tasks"));
let nextId = JSON.parse(localStorage.getItem("nextId"));
// Todo: create a function to generate a unique task id
function generateTaskId() {
  const newTask = {
    // ? Here we use a Web API called `crypto` to generate a random id for our project. This is a unique identifier that we can use to find the project in the array. `crypto` is a built-in module that we can use in the browser and Nodejs.    
    id: crypto.randomUUID(),
    name: projectName,
    type: projectType,
    dueDate: projectDate,
    status: 'to-do',
  };
  // #todo-cards is the id associated with newly generated cards
  // a unique id could be generated by using a counter and applyng a count to each card while adding a condition to not repeat.
  // I think i will have to setItem in this function
  
}

// Todo: create a function to create a task card
function displayMessage(type, message) {
  const formDisplayMessage = document.querySelector('.form-display-message');
  formDisplayMessage.textContent = message;
  formDisplayMessage.setAttribute('class', type);
}

function clickAddTask(event){
  addEventListener('click', '#addTaskButton')
  prompt(createTaskCard())
}

function createTaskCard(project) {
  const taskCard = $('<div>')
    .addClass('card project-card draggable my-3')
    .attr('data-project-id', project.id);
  const cardHeader = $('<div>').addClass('card-header h4').text(project.name);
  const cardBody = $('<div>').addClass('card-body');
  const cardDescription = $('<p>').addClass('card-text').text(project.type);
  const cardDueDate = $('<p>').addClass('card-text').text(project.dueDate);
  const cardDeleteBtn = $('<button>')
    .addClass('btn btn-danger delete')
    .text('Delete')
    .attr('data-project-id', project.id);

  // ? Sets the card background color based on due date. Only apply the styles if the dueDate exists and the status is not done.
  if (project.dueDate && project.status !== 'done') {
    const now = dayjs();
    const taskDueDate = dayjs(project.dueDate, 'DD/MM/YYYY');

    // ? If the task is due today, make the card yellow. If it is overdue, make it red.
    if (now.isSame(taskDueDate, 'day')) {
      taskCard.addClass('bg-warning text-white');
    } else if (now.isAfter(taskDueDate)) {
      taskCard.addClass('bg-danger text-white');
      cardDeleteBtn.addClass('border-light');
    }
  }

  // ? Gather all the elements created above and append them to the correct elements.
  cardBody.append(cardDescription, cardDueDate, cardDeleteBtn);
  taskCard.append(cardHeader, cardBody);

  // ? Return the card so it can be appended to the correct lane.
  return taskCard;
}
  // todo-cards in-progress-cards done-cards are the id's associated with cards
  // might be a prompt? when one clicks the add task button, they should be promted to add info. with that, i will need an event listener for click on the add task button. then in the prompt, i will need several text fields and one field for adding a date. I will need to add a condition for the fields that they cant be blank and upon filling out all the fields i will need to set the cards data in localStorage via setItem. The date bit will be a calendar selection and then based off that selection - this is info for a diferent function - the urgency of completing the task can be represented by a change in color. 

  // It seems i am making the cards with javascript - the general structue for the page is on html but the prompt will be entriely made by JS. This will require appendChild I think. 

// Todo: create a function to render the task list and make cards draggable
function renderTaskList() {
 
}

// Todo: create a function to handle adding a new task
function handleAddTask(event){

}

// Todo: create a function to handle deleting a task
function handleDeleteTask(event){

}

// Todo: create a function to handle dropping a task into a new status lane
// function handleDrop(event, ui) {
//   $( function() {
//     $( "#todo-cards" ).sortable();
//   } );

// }

// Todo: when the page loads, render the task list, add event listeners, make lanes droppable, and make the due date field a date picker
$(document).ready(function () {

});
